import{_ as e,c as t,a as s,o as a}from"./app-DyfPPSu6.js";const n={};function d(l,i){return a(),t("div",null,i[0]||(i[0]=[s(`<h1 id="git-根据目录文件夹配置用户名和邮箱" tabindex="-1"><a class="header-anchor" href="#git-根据目录文件夹配置用户名和邮箱"><span>Git 根据目录文件夹配置用户名和邮箱</span></a></h1><p>平常开发过程中自己电脑 Git 全局配置的用户名和邮箱都是自己常用的，由于会存在开发公司项目的情况，Git 配置的用户名和邮箱肯定会不一样，此时需要手动在公司项目仓库下面单独设置提交的<code>user.name</code>和<code>user.email</code>，有人肯定会说这也没啥麻烦的，但是公司项目过多的情况下拉取仓库后很可能会忘记设置，导致提交记录里面的用户名非公司项目账号，这个就会尴尬 😅，然后自己 Google 了一番记录下根据目录文件夹的形式去配置用户名和邮箱，该目录下的所有项目都会统一使用相同的 Git 配置。</p><h2 id="git-配置文件层级" tabindex="-1"><a class="header-anchor" href="#git-配置文件层级"><span>Git 配置文件层级</span></a></h2><p>先了解下 Git 有哪些层级的配置，通过<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git" target="_blank" rel="noopener noreferrer">自定义 Git - 配置 Git</a>中可以看到，Git 会首先会查找系统级的 <code>/etc/gitconfig</code> 文件，该文件含有系统里每位用户及他们所拥有的仓库的配置值。接下来 Git 会查找每个用户的<code>~/.gitconfig</code> 文件（或者 <code>~/.config/git/config</code> 文件），最后 Git 会查找你正在操作的仓库所对应的 Git 目录下的配置文件（<code>.git/config</code>），这个文件中的值只对该仓库有效。</p><ul><li>系统层级: <code>/etc/gitconfig</code>，作用于系统中每位用户的 Git 配置。</li><li>用户层级: <code>~/.gitconfig</code>，作用于具体用户的 Git 配置。</li><li>项目层级: <code>.git/config</code>，作用于具体仓库，只对该仓库有效。</li></ul><h2 id="includeif" tabindex="-1"><a class="header-anchor" href="#includeif"><span>[includeIf]</span></a></h2><p>Git 配置文件支持 <a href="https://git-scm.com/docs/git-config#_conditional_includes" target="_blank" rel="noopener noreferrer">Conditional Includes</a> 的配置。通过设置 <code>includeIf.&lt;condition&gt;.path</code>，可以向命中 <code>condition</code> 的 Git 仓库引入 <code>path</code> 指向一个 自定义的 Git 配置文件。</p><p>[includeIf] 的语法如下，<code>&lt;keyword&gt;</code> 为关键词，<code>&lt;data&gt;</code> 是与关键词关联的数据， 具体意义由关键词决定。</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[includeIf </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;keyword&gt;:&lt;data&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  path</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> path/to/gitconfig</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中支持的 keyword 关键词有<code>gitdir</code>、<code>gitdir/i</code>、<code>onbranch</code>：</p><ul><li><code>gitdir</code>: 其中 <code>&lt;data&gt;</code> 是一个 <code>glob pattern</code> 如果代码仓库的<code>.git</code> 目录匹配 <code>&lt;data&gt;</code> 指定的 <code>glob pattern</code>，那么条件命中；</li><li><code>gitdir/i</code>：<code>gitdir</code> 的大小写不敏感版本。</li><li><code>onbranch</code>：其中 <code>&lt;data&gt;</code> 是匹配分支名的一个 <code>glob pattern</code>， 假如代码仓库中分支名匹配 <code>&lt;data&gt;</code>，那么条件就成立。</li></ul><p>看下来后我们其实需要的是就是<code>gitdir</code>，根据代码目录仓库匹配。</p><h2 id="实例配置" tabindex="-1"><a class="header-anchor" href="#实例配置"><span>实例配置</span></a></h2><p>假如公司的所有项目都放在<code>~/jobCode/</code>目录下面。编辑用户目录下面的配置文件<code>~/.gitconfig</code></p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">vim</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~/.gitconfig</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在配置文件的最后加上<code>includeIf</code>配置</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[includeIf </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;gitdir:~/jobCode/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  path</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ~/jobCode/.gitconfig</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后在<code>~/jobCode/</code>目录下面新增<code>.gitconfig</code>配置文件，并配置<code>user.name</code>和<code>user.email</code>信息</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[user]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xx</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  email</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> xx</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[http]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # 如果需要代理的话配置proxy，不需要可以忽略</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  proxy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">Proxy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> UR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">L&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后可以重新拉取一个公司的新仓库，随便改点东西提交后查看提交记录中的用户名和邮箱验证下。</p>`,20)]))}const c=e(n,[["render",d]]),r=JSON.parse('{"path":"/article/git/git-config-width-directory.html","title":"Git 根据目录文件夹配置用户名和邮箱","lang":"zh-CN","frontmatter":{"date":"2023-06-23T00:00:00.000Z","category":["Git"],"tag":["Git"],"layout":"ArticleLayout","containerClass":"article-container","description":"平常开发过程中自己电脑 Git 全局配置的用户名和邮箱都是自己常用的，由于会存在开发公司项目的情况，Git 配置的用户名和邮箱肯定会不一样，此时需要手动在公司项目仓库下面单独设置提交的user.name和user.email，有人肯定会说这也没啥麻烦的，但是公司项目过多的情况下拉取仓库后很可能会忘记设置，导致提交记录里面的用户名非公司项目账号，这个就会...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git 根据目录文件夹配置用户名和邮箱\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-23T12:33:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bing🐣\\"}]}"],["meta",{"property":"og:url","content":"https://liubing.me/article/git/git-config-width-directory.html"}],["meta",{"property":"og:site_name","content":"Bing🐣"}],["meta",{"property":"og:title","content":"Git 根据目录文件夹配置用户名和邮箱"}],["meta",{"property":"og:description","content":"平常开发过程中自己电脑 Git 全局配置的用户名和邮箱都是自己常用的，由于会存在开发公司项目的情况，Git 配置的用户名和邮箱肯定会不一样，此时需要手动在公司项目仓库下面单独设置提交的user.name和user.email，有人肯定会说这也没啥麻烦的，但是公司项目过多的情况下拉取仓库后很可能会忘记设置，导致提交记录里面的用户名非公司项目账号，这个就会..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-23T12:33:32.000Z"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:published_time","content":"2023-06-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-23T12:33:32.000Z"}]]},"git":{"createdTime":1687523612000,"updatedTime":1687523612000,"contributors":[{"name":"liub1934","username":"liub1934","email":"liub1934@gmail.com","commits":1,"url":"https://github.com/liub1934"}]},"readingTime":{"minutes":2.65,"words":794},"filePathRelative":"article/git/git-config-width-directory.md","excerpt":"\\n<p>平常开发过程中自己电脑 Git 全局配置的用户名和邮箱都是自己常用的，由于会存在开发公司项目的情况，Git 配置的用户名和邮箱肯定会不一样，此时需要手动在公司项目仓库下面单独设置提交的<code>user.name</code>和<code>user.email</code>，有人肯定会说这也没啥麻烦的，但是公司项目过多的情况下拉取仓库后很可能会忘记设置，导致提交记录里面的用户名非公司项目账号，这个就会尴尬 😅，然后自己 Google 了一番记录下根据目录文件夹的形式去配置用户名和邮箱，该目录下的所有项目都会统一使用相同的 Git 配置。</p>\\n","autoDesc":true}');export{c as comp,r as data};
