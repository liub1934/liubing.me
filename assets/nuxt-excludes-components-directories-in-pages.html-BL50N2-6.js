import{_ as s,c as a,a as n,o as e}from"./app-DyfPPSu6.js";const t={};function p(l,i){return e(),a("div",null,i[0]||(i[0]=[n(`<h1 id="nuxt-排除-pages-页面中的-components-组件目录" tabindex="-1"><a class="header-anchor" href="#nuxt-排除-pages-页面中的-components-组件目录"><span>Nuxt 排除 pages 页面中的 components 组件目录</span></a></h1><p>通常在项目的页面开发过程中会将一整个页面分割成多个组件形式，这样也方便后续的维护，但由于 Nuxt 会为 <code>~/pages/</code> 目录中的每个页面自动创建路由，这会导致在<code>pages</code>目录中的新建的<code>components</code>目录中的组件代码也会被生成页面路由，并且是可以通过路由地址进行访问的，没有使用到的<code>components</code>组件代码也会被进行打包，这显然不是我们想要的效果，顺带记录下解决方法。</p><h2 id="通过-nuxtignore-忽略" tabindex="-1"><a class="header-anchor" href="#通过-nuxtignore-忽略"><span>通过 nuxtignore 忽略</span></a></h2><p><code>.nuxtignore</code> 文件告诉 Nuxt 在构建阶段忽略项目根目录（rootDir）中的文件。</p><p>不足之处就是虽然我们可以忽略<code>pages</code>目录中<code>components</code>目录中的代码，但是最终打包的时候依旧会生成页面的路由，只是访问的时候会显示无法找到路由。</p><figure><img src="https://image.liubing.me/i/2025/05/03/681581bf9f9c3.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><figure><img src="https://image.liubing.me/i/2025/05/03/6815821ee179b.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>而且这个组件没有任何文件引用它，也会出现在最终的打包代码中，从而增加打包后的文件体积。</p><figure><img src="https://image.liubing.me/i/2025/05/03/681582bf5be4e.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><h2 id="通过路由页面钩子排除" tabindex="-1"><a class="header-anchor" href="#通过路由页面钩子排除"><span>通过路由页面钩子排除</span></a></h2><p>路由页面提供了一个<code>pages:extend</code>的钩子，该钩子可用于添加、更改或移除扫描路由中的页面，具体参见<a href="https://nuxt.com/docs/guide/recipes/custom-routing#pages-hook" target="_blank" rel="noopener noreferrer">Pages Hook</a>，我们可以参考示例代码修改下从而移除<code>pages</code>中的<code>components</code>目录生成的路由。</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="nuxt.config.ts"><span>nuxt.config.ts</span></div><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">NuxtPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;@nuxt/schema&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineNuxtConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  hooks</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &#39;pages:extend&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">pages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> removePagesMatching</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">pattern</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RegExp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">pages</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NuxtPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> pagesToRemove</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NuxtPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> of</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">match</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">            pagesToRemove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">          else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            removePagesMatching</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pattern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">children</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> page</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> of</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pagesToRemove</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">          pages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">splice</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">pages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // 移除pages中components目录自动生成的路由</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      removePagesMatching</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\/</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">components/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pages</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>如果组件未被引用也不会出现在最终的打包文件中。</p><figure><img src="https://image.liubing.me/i/2025/05/03/6815851ec28ac.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>`,14)]))}const k=s(t,[["render",p]]),r=JSON.parse('{"path":"/article/vue/nuxt/nuxt-excludes-components-directories-in-pages.html","title":"Nuxt 排除 pages 页面中的 components 组件目录","lang":"zh-CN","frontmatter":{"date":"2025-05-03T00:00:00.000Z","category":["nuxt"],"tag":["nuxt"],"layout":"ArticleLayout","containerClass":"article-container","description":"通常在项目的页面开发过程中会将一整个页面分割成多个组件形式，这样也方便后续的维护，但由于 Nuxt 会为 ~/pages/ 目录中的每个页面自动创建路由，这会导致在pages目录中的新建的components目录中的组件代码也会被生成页面路由，并且是可以通过路由地址进行访问的，没有使用到的components组件代码也会被进行打包，这显然不是我们想要的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nuxt 排除 pages 页面中的 components 组件目录\\",\\"image\\":[\\"https://image.liubing.me/i/2025/05/03/681581bf9f9c3.png\\",\\"https://image.liubing.me/i/2025/05/03/6815821ee179b.png\\",\\"https://image.liubing.me/i/2025/05/03/681582bf5be4e.png\\",\\"https://image.liubing.me/i/2025/05/03/6815851ec28ac.png\\"],\\"datePublished\\":\\"2025-05-03T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-03T02:55:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bing🐣\\"}]}"],["meta",{"property":"og:url","content":"https://liubing.me/article/vue/nuxt/nuxt-excludes-components-directories-in-pages.html"}],["meta",{"property":"og:site_name","content":"Bing🐣"}],["meta",{"property":"og:title","content":"Nuxt 排除 pages 页面中的 components 组件目录"}],["meta",{"property":"og:description","content":"通常在项目的页面开发过程中会将一整个页面分割成多个组件形式，这样也方便后续的维护，但由于 Nuxt 会为 ~/pages/ 目录中的每个页面自动创建路由，这会导致在pages目录中的新建的components目录中的组件代码也会被生成页面路由，并且是可以通过路由地址进行访问的，没有使用到的components组件代码也会被进行打包，这显然不是我们想要的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://image.liubing.me/i/2025/05/03/681581bf9f9c3.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-03T02:55:50.000Z"}],["meta",{"property":"article:tag","content":"nuxt"}],["meta",{"property":"article:published_time","content":"2025-05-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-03T02:55:50.000Z"}]]},"git":{"createdTime":1746240910000,"updatedTime":1746240950000,"contributors":[{"name":"liub1934","username":"liub1934","email":"liub1934@gmail.com","commits":2,"url":"https://github.com/liub1934"}]},"readingTime":{"minutes":1.62,"words":487},"filePathRelative":"article/vue/nuxt/nuxt-excludes-components-directories-in-pages.md","excerpt":"\\n<p>通常在项目的页面开发过程中会将一整个页面分割成多个组件形式，这样也方便后续的维护，但由于 Nuxt 会为 <code>~/pages/</code> 目录中的每个页面自动创建路由，这会导致在<code>pages</code>目录中的新建的<code>components</code>目录中的组件代码也会被生成页面路由，并且是可以通过路由地址进行访问的，没有使用到的<code>components</code>组件代码也会被进行打包，这显然不是我们想要的效果，顺带记录下解决方法。</p>\\n","autoDesc":true}');export{k as comp,r as data};
