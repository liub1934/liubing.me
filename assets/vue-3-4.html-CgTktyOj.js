import{_ as i,c as s,a,o as t}from"./app-DyfPPSu6.js";const n={};function r(l,e){return t(),s("div",null,e[0]||(e[0]=[a(`<h1 id="vue-3-4-发布" tabindex="-1"><a class="header-anchor" href="#vue-3-4-发布"><span>Vue 3.4 发布</span></a></h1><blockquote><p>本文为翻译 原文地址：<a href="https://blog.vuejs.org/posts/vue-3-4" target="_blank" rel="noopener noreferrer">Announcing Vue 3.4</a></p></blockquote><p>今天，我们非常高兴地宣布 Vue 3.4&quot;🏀大灌篮 &quot;正式发布！</p><p>该版本包含一些实质性的内部改进-其中最显著的是重写了模板解析器，速度提高了 2 倍，还重构了反应性系统，使效果触发更准确、更高效。此外，它还对 API 进行了一系列质量改进，包括稳定了 <code>defineModel</code> 和绑定道具时的新同名简称。</p><p>本文章概述了 3.4 中的重点功能。有关变更的完整列表，请查阅<a href="https://github.com/vuejs/core/blob/main/CHANGELOG.md#340-2023-12-28" target="_blank" rel="noopener noreferrer">GitHub 上的完整更新日志</a>。</p><h2 id="需要采取的潜在行动" tabindex="-1"><a class="header-anchor" href="#需要采取的潜在行动"><span>需要采取的潜在行动</span></a></h2><ol><li><p>要充分利用 3.4 中的新功能，建议在升级到 3.4 时同时更新以下依赖项：</p><ul><li>Volar / vue-tsc@^1.8.27 (<strong>required</strong>)</li><li>@vitejs/plugin-vue@^5.0.0 （如果使用 Vite）</li><li>nuxt@^3.9.0（如使用 Nuxt）</li><li>vue-loader@^17.4.0（如使用 webpack 或 vue-cli）</li></ul></li><li><p>如果在 Vue 中使用 TSX，请检查已删除：<a href="#%E5%85%A8%E5%B1%80-jsx-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4">全局 JSX 命名空间</a> 中所需的操作。</p></li><li><p>确保不再使用任何过时的功能（如果使用了，控制台中应该会有警告提示）。它们可能已被<a href="#%E5%85%B6%E4%BB%96%E5%B7%B2%E5%88%A0%E9%99%A4%E5%8A%9F%E8%83%BD">在 3.4 中移除</a>。</p></li></ol><h3 id="功能亮点" tabindex="-1"><a class="header-anchor" href="#功能亮点"><span>功能亮点</span></a></h3><h3 id="解析器速度提高-2-倍-sfc-构建性能得到改善" tabindex="-1"><a class="header-anchor" href="#解析器速度提高-2-倍-sfc-构建性能得到改善"><span>解析器速度提高 2 倍，SFC 构建性能得到改善</span></a></h3><ul><li>上下文： <a href="https://github.com/vuejs/core/pull/9674" target="_blank" rel="noopener noreferrer">PR#9674</a></li></ul><p>在 3.4 中，我们完全重写了模板解析器。以前，Vue 使用的是递归下降解析器，依赖于许多正则表达式和前瞻搜索。新的解析器使用了基于 <a href="https://github.com/fb55/htmlparser2" target="_blank" rel="noopener noreferrer">htmlparser2</a> 中标记符的状态机标记符，只对整个模板字符串迭代一次。因此，对于各种大小的模板，解析器的速度都能持续提高一倍。得益于我们广泛的测试用例和 <a href="https://github.com/vuejs/ecosystem-ci" target="_blank" rel="noopener noreferrer">ecosystem-ci</a> 的支持，该解析器对 Vue 最终用户来说也是 100% 向后兼容的。</p><p>在将新解析器与系统其他部分集成时，我们还发现了一些进一步提高 SFC 整体编译性能的机会。基准测试表明，在生成源映射的同时编译 Vue SFC 的脚本和模板部分时，性能提高了约 44%。不过，请注意，Vue SFC 编译只是实际项目中整个构建过程的一部分。与孤立的基准相比，端到端构建时间的最终增益可能要小得多。</p><p>除 Vue 核心外，新解析器还将有利于提高 Volar / vue-tsc 以及需要解析 Vue SFC 或模板（如 Vue 宏）的社区插件的性能。</p><h3 id="更高效的反应系统" tabindex="-1"><a class="header-anchor" href="#更高效的反应系统"><span>更高效的反应系统</span></a></h3><p><strong>上下文：<a href="https://github.com/vuejs/core/pull/5912" target="_blank" rel="noopener noreferrer">PR#5912</a></strong></p><p>3.4 还对反应系统进行了大量重构，目的是提高已计算属性的重新计算效率。</p><p>为了说明改进的内容，让我们考虑以下情况：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> count</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ref</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> isEven</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> computed</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ===</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">watchEffect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">isEven</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// logs true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // logs true again</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 3.4 之前，每次更改 <code>count.value</code> 时都会触发 <code>watchEffect</code> 的回调，即使计算结果保持不变。经过 3.4 版之后的优化，现在只有当计算结果发生变化时才会触发回调。</p><p>此外，在 3.4 中</p><ul><li>多个计算结果变化只触发一次同步效果。</li><li>数组的 <code>shift</code>、<code>unshift</code> 和 <code>splice</code> 方法只触发一次同步效果。</li></ul><p>除了<a href="https://github.com/vuejs/core/pull/5912#issuecomment-1748985641" target="_blank" rel="noopener noreferrer">基准</a> 中显示的增益外，这应能在许多情况下减少不必要的组件重新呈现，同时保留完全的向后兼容性。</p><h3 id="definemodel现已稳定" tabindex="-1"><a class="header-anchor" href="#definemodel现已稳定"><span><code>defineModel</code>现已稳定</span></a></h3><p><strong>上下文： <a href="https://github.com/vuejs/rfcs/discussions/503" target="_blank" rel="noopener noreferrer">RFC#503</a></strong></p><p><code>defineModel</code> 是一个新的 <code>&lt;script setup&gt;</code> 宏，旨在简化支持 <code>v-model</code> 的组件的实现。它曾作为实验功能在 3.3 中发布，并在 3.4 中升级到稳定状态。现在，它还为使用 <code>v-model</code> 修饰符提供了更好的支持。</p><p>相关文档：</p><ul><li><a href="https://vuejs.org/guide/components/v-model.html" target="_blank" rel="noopener noreferrer">修订组件v-model部分</a></li><li><a href="https://vuejs.org/api/sfc-script-setup.html#definemodel" target="_blank" rel="noopener noreferrer">defineModel API 参考</a></li></ul><h3 id="v-bind-同名速记" tabindex="-1"><a class="header-anchor" href="#v-bind-同名速记"><span><code>v-bind</code> 同名速记</span></a></h3><p><strong>语境： <a href="https://github.com/vuejs/core/pull/9451" target="_blank" rel="noopener noreferrer">PR#9451</a></strong></p><p>现在您可以将其缩短：</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">alt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">alt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>变成这样：</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">img</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">src</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">alt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该功能在过去经常被要求使用。最初，我们担心其用法会与布尔属性相混淆。不过，在重新审视该功能后，我们现在认为，考虑到其动态性质，<code>v-bind</code> 的行为比原生属性更像 JavaScript，这是有道理的。</p><h3 id="改进水合失配错误" tabindex="-1"><a class="header-anchor" href="#改进水合失配错误"><span>改进水合失配错误</span></a></h3><p><strong>语境： <a href="https://github.com/vuejs/core/pull/5953" target="_blank" rel="noopener noreferrer">PR#5953</a></strong></p><p>3.4 版对水合失配错误信息进行了多项改进：</p><ol><li>提高了措辞的清晰度（服务器渲染与客户端预期）。</li><li>消息中现在包含有问题的 DOM 节点，因此您可以在页面上或元素面板中快速找到它。</li><li>水合失配检查现在也适用于类、样式和其他动态绑定的属性。</li></ol><p>此外，3.4 还添加了一个新的编译时标志 <a href="https://vuejs.org/api/compile-time-flags.html#vue-prod-hydration-mismatch-details" target="_blank" rel="noopener noreferrer"><strong>VUE_PROD_HYDRATION_MISMATCH_DETAILS</strong></a>，可用于强制水合失配错误包含完整的详细信息，即使在生产环境中也是如此。</p><h3 id="错误代码和编译时标志参考" tabindex="-1"><a class="header-anchor" href="#错误代码和编译时标志参考"><span>错误代码和编译时标志参考</span></a></h3><p>为了减少包的大小，Vue 会在生产构建中丢弃较长的错误信息字符串。不过，这意味着生产环境中错误处理程序捕获的错误会收到较短的错误代码，如果不深入研究 Vue 的源代码，就很难解读这些代码。</p><p>为了改善这种情况，我们在文档中添加了<a href="https://vuejs.org/error-reference/" target="_blank" rel="noopener noreferrer">生产错误参考页</a>。这些错误代码是从 Vue 稳定发布的最新版本中自动生成的。</p><p>我们还添加了<a href="https://vuejs.org/api/compile-time-flags.html" target="_blank" rel="noopener noreferrer">编译时标志参考</a>，其中说明了如何为不同的构建工具配置这些标志。</p><h2 id="已删除的过时功能" tabindex="-1"><a class="header-anchor" href="#已删除的过时功能"><span>已删除的过时功能</span></a></h2><h3 id="全局-jsx-命名空间" tabindex="-1"><a class="header-anchor" href="#全局-jsx-命名空间"><span>全局 JSX 命名空间</span></a></h3><p>从 3.4 开始，Vue 默认不再注册全局 <code>JSX</code> 命名空间。这是为了避免与 React 的全局命名空间发生冲突，以便两个库的 TSX 可以在同一项目中共存。这不会影响使用最新版 Volar 的纯 SFC 用户。</p><p>如果您正在使用 TSX，有两种选择：</p><ol><li><p>在升级到 3.4 之前，在 <code>tsconfig.json</code> 中将 <a href="https://www.typescriptlang.org/tsconfig#jsxImportSource" target="_blank" rel="noopener noreferrer">jsxImportSource</a> 明确设置为 <code>&#39;vue&#39;</code>。您也可以在文件顶部添加 <code>/* @jsxImportSource vue */</code> 注释，选择在每个文件中使用。</p></li><li><p>如果您的代码依赖于全局 <code>JSX</code> 命名空间的存在，例如使用 <code>JSX.Element</code> 等类型，您可以通过显式引用 <code>vue/jsx</code> 来保留与 3.4 之前完全相同的全局行为，该引用会注册全局 <code>JSX</code> 命名空间。</p></li></ol><p>请注意，这是次要发布版本中仅类型的破坏性变更，符合我们的 <a href="https://vuejs.org/about/releases.html#semantic-versioning-edge-cases" target="_blank" rel="noopener noreferrer">release policy</a>。</p><h3 id="其他已删除功能" tabindex="-1"><a class="header-anchor" href="#其他已删除功能"><span>其他已删除功能</span></a></h3><ul><li><a href="https://vuejs.org/guide/extras/reactivity-transform.html" target="_blank" rel="noopener noreferrer">Reactivity Transform</a>在 3.3 中被标记为弃用，现已在 3.4 中移除。由于该功能是试验性的，因此不需要重大变更。希望继续使用该功能的用户可以通过 <a href="https://vue-macros.dev/features/reactivity-transform.html" target="_blank" rel="noopener noreferrer">Vue Macros 插件</a>。</li><li>删除了 <code>app.config.unwrapInjectedRef</code>。该功能在 3.3 中已被弃用并默认启用。在 3.4 中已无法禁用此行为。</li><li>模板中的 <code>@vnodeXXX</code> 事件侦听器现在会出现编译器错误，而不是弃用警告。请使用 <code>@vue:XXX</code> 监听器。</li><li>删除了 <code>v-is</code> 指令。它在 3.3 中已被弃用。请使用带有 <code>vue:</code> 前缀的 <a href="https://vuejs.org/api/built-in-special-attributes.html#is" target="_blank" rel="noopener noreferrer"><code>is</code> 属性</a> 代替。</li></ul>`,51)]))}const p=i(n,[["render",r]]),o=JSON.parse('{"path":"/article/vue/vue-3-4.html","title":"Vue 3.4 发布","lang":"zh-CN","frontmatter":{"date":"2023-12-30T00:00:00.000Z","category":["Vue"],"tag":["Vue","Vue3"],"layout":"ArticleLayout","containerClass":"article-container","description":"本文为翻译 原文地址：Announcing Vue 3.4 今天，我们非常高兴地宣布 Vue 3.4\\"🏀大灌篮 \\"正式发布！ 该版本包含一些实质性的内部改进-其中最显著的是重写了模板解析器，速度提高了 2 倍，还重构了反应性系统，使效果触发更准确、更高效。此外，它还对 API 进行了一系列质量改进，包括稳定了 defineModel 和绑定道具时的新...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue 3.4 发布\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-12-31T10:28:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Bing🐣\\"}]}"],["meta",{"property":"og:url","content":"https://liubing.me/article/vue/vue-3-4.html"}],["meta",{"property":"og:site_name","content":"Bing🐣"}],["meta",{"property":"og:title","content":"Vue 3.4 发布"}],["meta",{"property":"og:description","content":"本文为翻译 原文地址：Announcing Vue 3.4 今天，我们非常高兴地宣布 Vue 3.4\\"🏀大灌篮 \\"正式发布！ 该版本包含一些实质性的内部改进-其中最显著的是重写了模板解析器，速度提高了 2 倍，还重构了反应性系统，使效果触发更准确、更高效。此外，它还对 API 进行了一系列质量改进，包括稳定了 defineModel 和绑定道具时的新..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-31T10:28:16.000Z"}],["meta",{"property":"article:tag","content":"Vue3"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2023-12-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-31T10:28:16.000Z"}]]},"git":{"createdTime":1703904896000,"updatedTime":1704018496000,"contributors":[{"name":"liub1934","username":"liub1934","email":"liub1934@gmail.com","commits":2,"url":"https://github.com/liub1934"}]},"readingTime":{"minutes":6.35,"words":1905},"filePathRelative":"article/vue/vue-3-4.md","excerpt":"\\n<blockquote>\\n<p>本文为翻译\\n原文地址：<a href=\\"https://blog.vuejs.org/posts/vue-3-4\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Announcing Vue 3.4</a></p>\\n</blockquote>\\n<p>今天，我们非常高兴地宣布 Vue 3.4\\"🏀大灌篮 \\"正式发布！</p>\\n<p>该版本包含一些实质性的内部改进-其中最显著的是重写了模板解析器，速度提高了 2 倍，还重构了反应性系统，使效果触发更准确、更高效。此外，它还对 API 进行了一系列质量改进，包括稳定了 <code>defineModel</code> 和绑定道具时的新同名简称。</p>\\n<p>本文章概述了 3.4 中的重点功能。有关变更的完整列表，请查阅<a href=\\"https://github.com/vuejs/core/blob/main/CHANGELOG.md#340-2023-12-28\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">GitHub 上的完整更新日志</a>。</p>\\n","autoDesc":true}');export{p as comp,o as data};
